Assignmnt 2
Q1]
=>def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    total_sum = 0
    for i in range(0, len(nums), 2):
        total_sum += nums[i]  # Sum the minimum elements in each pair
    return total_sum

nums = [1, 4, 3, 2]
print(arrayPairSum(nums))

Q2]
=>def distributeCandies(candyType):
    unique_candies = len(set(candyType))  # Count the number of unique candy types
    max_candies = len(candyType) // 2  # Calculate the maximum number of candies Alice can eat
    return min(unique_candies, max_candies)  # Return the minimum of unique_candies and max_candies
candyType = [1, 1, 2, 2, 3, 3]
print(distributeCandies(candyType))

Q5]
=>def maximumProduct(nums):
    nums.sort()  # Sort the array in ascending order
    n = len(nums)
    # Compare the product of the three largest numbers and the product of two smallest negative numbers and the largest positive number
    return max(nums[n-1] * nums[n-2] * nums[n-3], nums[0] * nums[1] * nums[n-1])
nums = [1, 2, 3]
print(maximumProduct(nums))

Q3]
=>def findLHS(nums):
    num_freq = {}  # Dictionary to store the frequency of each number
    max_length = 0
    for num in nums:
        num_freq[num] = num_freq.get(num, 0) + 1  # Increment the frequency of the number

    for num in num_freq:
        if num + 1 in num_freq:
            length = num_freq[num] + num_freq[num + 1]  # Calculate the length of the harmonious subsequence
            max_length = max(max_length, length)

    return max_length
nums = [1, 3, 2, 2, 5, 2, 3, 7]
print(findLHS(nums))


Q4]
=>def canPlaceFlowers(flowerbed, n):
    count = 0  # Counter for the number of new flowers that can be planted
    i = 0
    while i < len(flowerbed):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):
            flowerbed[i] = 1  # Plant a new flower
            count += 1
        i += 1
    return count >= n  # Return true if enough flowers can be planted, false otherwise
flowerbed = [1, 0, 0, 0, 1]
n = 1
print(canPlaceFlowers(flowerbed, n))


Q6]
=>def search(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1
nums = [-1, 0, 3, 5, 9, 12]
target = 9
print(search(nums, target))

Q7]
=>def isMonotonic(nums):
    increasing = decreasing = True

    for i in range(1, len(nums)):
        if nums[i] < nums[i-1]:
            increasing = False
        if nums[i] > nums[i-1]:
            decreasing = False

    return increasing or decreasing
nums = [1, 2, 2, 3]
print(isMonotonic(nums))


